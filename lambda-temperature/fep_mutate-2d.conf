# configuration for FEP replica exchange

# Search "User_to_set" to see places you may need to change

# ====================================================================
# BEFORE running simulation, 
#       prepare your output directories:
#       ../make_output_dirs.sh output_solv <NUMBER_OF_REPLICAS>

# ====================================================================
# TO RUN simulation:
#       User_to_set: be consistent with the number of replicas and name of output directory 
#       mpiexec -n 36 $bindir/namd2 +replicas 36 fep_solv.conf --source FEP_wca.namd +stdout output_solv/%d/job0.%d.log

#   mpirun -np 8 -hostfile hostfile $bindir/namd2 +replicas 8 fold_alanin.conf --source ../replica.namd +stdout output/%d/job0.%d.log
# the number of MPI ranks (-np) must be a multiple of the number of replicas (+replicas)
#
# ====================================================================
# AFTER simulation:
#       Post-process output with wham script:
#          sh ./wham
#          sh ./get_fe.sh
#
#          Output file include:
#            1. repu_fe.dat   <- repulsive energy
#            2. disp_wham_fe  <- dispersive energy
#            3. chrg_wham_fe  <- electrostatic energy

# view in VMD:  source fold_alanin.conf; source ../show_replicas.vmd
# add continued:   source restart_1.conf; source ../show_replicas.vmd
# show both:  vmd -e load_all.vmd

# ====================================================================
#
# User_to_set: flag for using drude model or not; 1=yes, 0=no
set drude_model  0

# User_to_set: total number of replicas
set num_replicas 48

# User_to_set: total number of lambda values
set num_lambda 16

# User_to_set: the temperature of simulations
set num_temp 3
set min_temp 295.15
set max_temp 305.15

# User_to_set: the steps of simulations between two exchange attempts
set steps_per_run 100

# User_to_set: to control the total simulation time, which = steps_per_run * num_runs
set num_runs 1000

# User_to_set: num_runs should be divisible by 
# runs_per_frame * frames_per_restart
# Controls the frequency with which snapshots are saved in dcd file
set runs_per_frame 500 

# User_to_set: to control the frequency with which restart files are output
set frames_per_restart 1

proc replica_lambda { i } {
  global num_lambda
  set ix [expr $i % $num_lambda]
  set lambda [list [ expr $ix*1.0 / ($num_lambda) ] [ expr ($ix+1)*1.0 / ($num_lambda) ] ]
  return $lambda
}

proc replica_temp { i } {
  global num_lambda num_temp min_temp max_temp
  set iy [expr $i / $num_lambda]
  return [format "%.2f" [expr ($min_temp * \
         exp( log(1.0*$max_temp/$min_temp)*(1.0*$iy/($num_temp-1)) ) )]]
}     

proc lambda_neighbors { i } {
  global num_lambda
  global num_temp
 
  set nx $num_lambda
  set ny $num_temp
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $ix % 2 } { set sx -1 } { set sx 1 }
  set result {}
  foreach { dx } { $sx -$sx } {
    set jx [expr $ix + $dx]
    if { $jx < 0 || $jx >= $nx || $iy < 0 || $iy >= $ny } {
      lappend result $i ; # swap with self
    } {
      set j [expr $iy * $nx + $jx]
      lappend result $j
    }
  }
  return $result
}
 
proc temp_neighbors { i } {
  global num_lambda
  global num_temp
 
  set nx $num_lambda
  set ny $num_temp
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $iy % 2 } { set sy -1 } { set sy 1 }
  set result {}
  foreach { dy } { $sy -$sy } {
    set jy [expr $iy + $dy]
    if { $jy < 0 || $jy >= $ny || $ix < 0 || $ix >= $nx } {
      lappend result $i ; # swap with self
    } {
      set j [expr $jy * $nx + $ix]
      lappend result $j
    }
  }
  return $result
}

set namd_config_file "fep_mutate_base.namd"
set output_root "output/%s/fep" ; # directories must exist
